{"version":3,"sources":["util/interact.js","backend/HelloWorld.js","backend/alchemylogo.svg","backend/App.js","backend/reportWebVitals.js","index.js"],"names":["require","config","web3","createAlchemyWeb3","process","contractABI","contractAddress","helloWorldContract","eth","Contract","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","message","target","href","approve","transParam","to","from","data","methods","sendFunds","encodeABI","params","deny","singleRefund","donate","userin","userInput","Math","pow","toString","alert","value","HelloWorld","useState","walletAddress","setWallet","setStatus","newMessage","setNewMessage","connectWalletPressed","walletResponse","onDonatePressed","document","getElementById","console","log","onApprovePressed","onDenyPressed","id","onClick","length","String","substring","style","paddingTop","type","placeholder","onChange","e","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3990a0e7.chunk.js","sourcesContent":["require('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require(\"../backend/contract-abi.json\");\r\nconst contractAddress = \"0xd1E3D3Bb0418e7Af816084F9F2B8eC9949FdbcB3\";\r\n\r\nexport const helloWorldContract = new web3.eth.Contract(\r\n    contractABI,\r\n    contractAddress\r\n);\r\n\r\n// const { CallerContract } = require('web3-eth-contract');\r\n// CallerContract.setProvider('wss://eth-goerli.g.alchemy.com/v2/y7PVXGDkWx1F_olSlXCEwVz2ayltSG3J');\r\n// const callerContract = new CallerContract(contractABI, contractAddress);\r\n\r\n\r\n\r\n// export const loadCurrentMessage = async () => {\r\n//     const message = await helloWorldContract.methods.message().call();\r\n//     return message;\r\n// };\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_requestAccounts\",\r\n            });\r\n            const obj = {\r\n                status: \"👆🏽 Write a message in the text-field above.\",\r\n                address: addressArray[0],\r\n            };\r\n            return obj;\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: \"😥 \" + err.message,\r\n            };\r\n        }\r\n    } else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n          <p>\r\n            {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_accounts\",\r\n            });\r\n            if (addressArray.length > 0) {\r\n                return {\r\n                    address: addressArray[0],\r\n                    status: \"👆🏽 Write a message in the text-field above.\",\r\n                };\r\n            } else {\r\n                return {\r\n                    address: \"\",\r\n                    status: \"🦊 Connect to Metamask using the top right button.\",\r\n                };\r\n            }\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: \"😥 \" + err.message,\r\n            };\r\n        }\r\n    } else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n          <p>\r\n            {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n\r\nexport const approve = async () =>{\r\n\r\n    const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n    });\r\n\r\n    const transParam = {\r\n        to: contractAddress,\r\n        from: addressArray[0],\r\n        data: helloWorldContract.methods.sendFunds().encodeABI(),\r\n    };\r\n\r\n    const txHash = await window.ethereum.request({\r\n        method: \"eth_sendTransaction\",\r\n        params: [transParam],\r\n    });\r\n};\r\n\r\nexport const deny = async () =>{\r\n    const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n    });\r\n\r\n    const transParam = {\r\n        to: contractAddress,\r\n        from: addressArray[0],\r\n        data: helloWorldContract.methods.singleRefund().encodeABI(),\r\n    };\r\n\r\n    const txHash = await window.ethereum.request({\r\n        method: \"eth_sendTransaction\",\r\n        params: [transParam],\r\n    });\r\n};\r\n\r\n\r\nexport const donate = async (address, userin) => {\r\n\r\n    const userInput = (userin * Math.pow(10, 18)).toString(16);\r\n    alert(userInput);\r\n\r\n\r\n    const transParam = {\r\n        to: contractAddress,\r\n        from: address,\r\n        value: userInput,\r\n        data: helloWorldContract.methods.donate().encodeABI(),\r\n    };\r\n\r\n    alert(\"Starting transaction\");\r\n    const txHash = await window.ethereum.request({\r\n        method: \"eth_sendTransaction\",\r\n        params: [transParam],\r\n        //value: userInput.toString(),\r\n    });\r\n\r\n    alert(\"IT WORKS!!!!\");\r\n}\r\n\r\n\r\n// export const updateMessage = async (address, message) => {\r\n//\r\n//     //input error handling\r\n//     if (!window.ethereum || address === null) {\r\n//         return {\r\n//             status:\r\n//                 \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\r\n//         };\r\n//     }\r\n//\r\n//     if (message.trim() === \"\") {\r\n//         return {\r\n//             status: \"❌ Your message cannot be an empty string.\",\r\n//         };\r\n//     }\r\n//     //set up transaction parameters\r\n//     const transactionParameters = {\r\n//         to: contractAddress, // Required except during contract publications.\r\n//         from: address, // must match user's active address.\r\n//         data: helloWorldContract.methods.update(message).encodeABI(),\r\n//     };\r\n//\r\n//     //sign the transaction\r\n//     try {\r\n//         const txHash = await window.ethereum.request({\r\n//             method: \"eth_sendTransaction\",\r\n//             params: [transactionParameters],\r\n//         });\r\n//         return {\r\n//             status: (\r\n//                 <span>\r\n//           ✅{\" \"}\r\n//                     <a target=\"_blank\" href={`https://ropsten.etherscan.io/tx/${txHash}`}>\r\n//             View the status of your transaction on Etherscan!\r\n//           </a>\r\n//           <br />\r\n//           ℹ️ Once the transaction is verified by the network, the message will\r\n//           be updated automatically.\r\n//         </span>\r\n//             ),\r\n//         };\r\n//     } catch (error) {\r\n//         return {\r\n//             status: \"😥 \" + error.message,\r\n//         };\r\n//     }\r\n// };\r\n","import React from'react-dom';\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n    helloWorldContract,\r\n    connectWallet,\r\n    updateMessage,\r\n    loadCurrentMessage,\r\n    getCurrentWalletConnected,\r\n    donate,\r\n    approve,\r\n    deny,\r\n} from \"../util/interact.js\";\r\n\r\nimport { ethers } from \"ethers\";\r\n\r\n\r\n\r\nimport alchemylogo from \"./alchemylogo.svg\";\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst HelloWorld = () => {\r\n    //state variables\r\n    const [walletAddress, setWallet] = useState(\"\");\r\n    const [status, setStatus] = useState(\"\");\r\n    const [message, setMessage] = useState(\"No connection to the network.\"); //default message\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n    //called only once\r\n    // useEffect(async () => {\r\n    //     const message = await loadCurrentMessage();\r\n    //     setMessage(message);\r\n    //     addSmartContractListener();\r\n    //\r\n    //     const {address, status} = await getCurrentWalletConnected();\r\n    //     setWallet(address);\r\n    //     setStatus(status);\r\n    //\r\n    //     addWalletListener();\r\n    // }, []);\r\n\r\n    function addSmartContractListener() {\r\n        helloWorldContract.events.UpdatedMessages({}, (error, data) => {\r\n            if (error) {\r\n                setStatus(\"😥 \" + error.message);\r\n            } else {\r\n                setMessage(data.returnValues[1]);\r\n                setNewMessage(\"\");\r\n                setStatus(\"🎉 Your message has been updated!\");\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    function addWalletListener() { //TODO: implement\r\n\r\n        if (window.ethereum) {\r\n            window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n                if (accounts.length > 0) {\r\n                    setWallet(accounts[0]);\r\n                    setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n                } else {\r\n                    setWallet(\"\");\r\n                    setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n                }\r\n            });\r\n        } else {\r\n            setStatus(\r\n                <p>\r\n                    {\" \"}\r\n                    🦊{\" \"}\r\n                    <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                        You must install Metamask, a virtual Ethereum wallet, in your\r\n                        browser.\r\n                    </a>\r\n                </p>\r\n            );\r\n        }\r\n    }\r\n\r\n    const connectWalletPressed = async () => {\r\n        const walletResponse = await connectWallet();\r\n        setStatus(walletResponse.status);\r\n        setWallet(walletResponse.address);\r\n    };\r\n\r\n\r\n    const onDonatePressed = async () => { //TODO: implement\r\n        var userin = document.getElementById(\"userInput\");\r\n        console.log(userin);\r\n\r\n\r\n        await donate(walletAddress, userin.value.toString());\r\n\r\n        //const { status } = await updateMessage(walletAddress, newMessage);\r\n        //setStatus(status);\r\n    };\r\n\r\n    const onApprovePressed = async() => {\r\n        await approve(walletAddress);\r\n    }\r\n\r\n    const onDenyPressed = async() => {\r\n        await deny(walletAddress);\r\n    }\r\n\r\n    // const onUpdatePressed = async () => { //TODO: implement\r\n    //     const { status } = await updateMessage(walletAddress, newMessage);\r\n    //     setStatus(status);\r\n    // };\r\n\r\n\r\n\r\n    //the UI of our component\r\n\r\n    return(\r\n        <div id=\"container\">\r\n            {/*<img id=\"logo\" src={alchemylogo}></img>*/}\r\n            <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n                {walletAddress.length > 0 ? (\r\n                    \"Connected: \" +\r\n                    String(walletAddress).substring(0, 6) +\r\n                    \"...\" +\r\n                    String(walletAddress).substring(38)\r\n                ) : (\r\n                    <span>Connect Wallet</span>\r\n                )}\r\n            </button>\r\n\r\n            <h2 style={{ paddingTop: \"50px\" }}>Progress:</h2>\r\n            {/*<p>{message} </p>*/}\r\n            {/*<img src={logo}/>*/}\r\n\r\n\r\n            <h2 style={{ paddingTop: \"18px\" }}>Enter Amount:</h2>\r\n\r\n            <div>\r\n                <input\r\n                    id=\"userInput\"\r\n                    type=\"text\"\r\n                    placeholder=\"Enter amount in Ether.\"\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                    value={newMessage}\r\n                />\r\n                {/*<p id=\"status\">{status}</p>*/}\r\n                <p>You donated: {message} Ether</p>\r\n\r\n                <button id=\"publish\" onClick={onDonatePressed}>\r\n                    Donate\r\n                </button>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <button id=\"publish\" onClick={onApprovePressed}>Approve</button>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <button id=\"publish\" onClick={onDenyPressed}>Deny</button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default HelloWorld;\r\n","export default __webpack_public_path__ + \"static/media/alchemylogo.9821dc1c.svg\";","import HelloWorld from './HelloWorld'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n    <HelloWorld></HelloWorld>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './backend/index.css';\r\nimport App from './backend/App';\r\nimport reportWebVitals from './backend/reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}